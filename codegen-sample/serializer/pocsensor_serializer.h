/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 3/23/2020
 ***********************************************************************************************/

#ifndef DIGITALTWIN_SERIALIZER_H
#define DIGITALTWIN_SERIALIZER_H

/**
 * @file pocsensor_serializer.h
 *
 * @brief Provide a consistent layer for serializing / deserializing PnP Schema.
 * A corresponding serialize function will be generated for:
 *     1) A telemetry.
 *     2) A read-only property.
 *     3) A command response.
 * A corresponding deserialize function will be generated for:
 *     1) A writable property.
 *     2) A command request.
 */

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <az_span.h>

#ifdef __cplusplus
extern "C"
{
#endif

/************************** Type Definition ******************************/
/**
 * @brief Data type definition of the location telemetry.
 */
typedef struct pocsensor_location
{
    double latitude;    /**< Distance from equator. */
    double longitude;   /**< Distance from meridian. */
} pocsensor_location;

/**
 * @brief Data type definition of the settings property.
 */
typedef struct pocsensor_settings
{
    double fan_speed;    /**< Target fan speed to set. */
    double voltage;     /**< Target voltage to set. */
} pocsensor_settings;

/**
 * @brief Data type definition of the updateFirmware command request.
 */
typedef struct pocsensor_update_firmware_request
{
    az_span firmware_uri;      /**< The download uri for the new firmware. */
    int firmware_version;    /**< The new firmware version. */
} pocsensor_update_firmware_request;


/********************* Serialization Functionss ***********************/
/**
 * @brief az_dt_procsensor_location_to_json Serialize the location data to a JSON string stored in the user-specified destination span.
 *
 * @param[in] source Refers to the location struct to be serialized.
 * @param[in] destination The az_span where the serialized bytes should be placed.
 * @param[out] out_span A pointer to an az_span that receives the span referring to the
 * destination span with its length updated.
 * @return An #az_result value indicating the result of the operation.
 *          #AZ_OK if successful
 *          #AZ_ERROR_INSUFFICIENT_SPAN_CAPACITY if the \p destination is not big enough to
 *  contain the serialized bytes.
 */
az_result az_dt_procsensor_location_to_json(pocsensor_location const* source, az_span destination, az_span* out_json);

/**
 * @brief az_dt_procsensor_battery_remaining_to_json Serialize the battery_remaing data to a JSON string stored in the user-specified destination span.
 *
 * @param[in] source Refers to the value of the battery_remaining to be serialized.
 * @param[in] destination The az_span where the serialized bytes should be placed.
 * @param[out] out_span A pointer to an az_span that receives the span referring to the
 * destination span with its length updated.
 * @return An #az_result value indicating the result of the operation.
 *          #AZ_OK if successful
 *          #AZ_ERROR_INSUFFICIENT_SPAN_CAPACITY if the \p destination is not big enough to
 *  contain the serialized bytes.
 */
az_result az_dt_procsensor_battery_remaining_to_json(double const* source, az_span destination, az_span* out_json);

/**
 * @brief az_dt_pocsensor_update_firmware_response_to_json Serialize the response value to a JSON string stored in the user-specified destination span.
 *
 * @param[in] source Refers to the value of a boolean response to be serialized.
 * @param[in] destination The az_span where the serialized bytes should be placed.
 * @param[out] out_span A pointer to an az_span that receives the span referring to the
 * destination span with its length updated.
 * @return An #az_result value indicating the result of the operation.
 *          #AZ_OK if successful
 *          #AZ_ERROR_INSUFFICIENT_SPAN_CAPACITY if the \p destination is not big enough to
 *  contain the serialized bytes.
 */
az_result az_dt_pocsensor_update_firmware_response_to_json(bool const* source, az_span destination, az_span* out_json);

/************************** Deserialization APIs ****************************/
/*
 * @brief az_dt_pocsensor_settings_from_json Deserialize the desired value for settings property from 
 * a JSON payload contained within the passed in buffer.
 *
 * @param destination A pointer to an pocsensor_settings instance to store the parsed value.
 * @param json_buffer A pointer to a buffer containing the JSON document to parse.
 * @return An #az_result value indicating the result of the operation.
 */
az_result az_dt_pocsensor_settings_from_json(pocsensor_settings* destination, az_span json_buffer);

/*
 * @brief az_dt_update_firmware_request_from_json Deserialize an update_firmware command request instance from
 * a JSON payload contained within the passed in buffer.
 *
 * @param destination A pointer to an pocsensor_update_firmware_request instance to stored the parsed value.
 * @param json_buffer A pointer to a buffer containing the JSON document to parse.
 * @return An #az_result value indicating the result of the operation.
 */
az_result az_dt_update_firmware_request_from_json(pocsensor_update_firmware_request* destination, az_span json_buffer);

#ifdef __cplusplus
}
#endif

#endif // DIGITALTWIN_SERIALIZER_H
